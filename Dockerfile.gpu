# Use NVIDIA CUDA base image with Ubuntu 24.04
FROM nvidia/cuda:13.0.0-devel-ubuntu24.04

# Set maintainer label
LABEL maintainer="jingxin.bc@gmail.com"

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set CUDA environment variables
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Install build tools and dependencies
RUN apt-get update && apt-get install -y \
    git \
    vim \
    wget \
    curl \
    # Build essentials
    build-essential \
    gcc \
    g++ \
    cmake \
    make \
    ninja-build \
    lsb-release \
    # Additional development tools
    pkg-config \
    gdb gdbserver \
    # Python and pybind11 dependencies
    python3 \
    python3-dev \
    python3-pip \
    python3-numpy \
    python3-matplotlib \
    python3-setuptools \
    python3-wheel \
    # nsys for GPU profiling
    # nsight-systems \
    # Clean up
    && rm -rf /var/lib/apt/lists/*

# Install pybind11 via pip
RUN pip3 install --break-system-packages pybind11[global]>=2.6.0

# Install latest Nsight Systems (nsys)
RUN apt-get update && apt-get install -y nsight-systems-2025.3.2 && \
    rm -rf /var/lib/apt/lists/*

# Install latest CMake from Kitware
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor -o /usr/share/keyrings/kitware.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/kitware.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" > /etc/apt/sources.list.d/kitware.list && \
    apt-get update && apt-get install -y cmake && \
    rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Create directories for external libraries
RUN mkdir -p /usr/local/src

# Install GEMMI and JSON
RUN cd /usr/local/src && \
    git clone https://github.com/project-gemmi/gemmi.git && \
    git clone --depth 1 --branch v3.11.3 https://github.com/nlohmann/json.git

# Install RMM (RAPIDS Memory Manager)
RUN cd /usr/local/src && \
    git clone https://github.com/rapidsai/rmm.git && \
    cd rmm && \
    mkdir build && \
    cd build && \
    cmake ../cpp -DCMAKE_INSTALL_PREFIX=/usr/local && \
    make -j$(nproc) && \
    make install

# Install Thrust (usually comes with CUDA, but let's make sure)
# Thrust is header-only and should be available in CUDA installation
RUN echo "Thrust should be available at /usr/local/cuda/include/thrust"

# Configure readline for better command-line experience
RUN echo '"\e[A": history-search-backward' >> /root/.inputrc && \
    echo '"\e[B": history-search-forward' >> /root/.inputrc && \
    echo 'set completion-ignore-case on' >> /root/.inputrc && \
    echo 'set show-all-if-ambiguous on' >> /root/.inputrc && \
    echo 'set show-all-if-unmodified on' >> /root/.inputrc

# Copy your application files
COPY . .

# Create a symlink for python command
RUN ln -s /usr/bin/python3 /usr/bin/python

# Example: Build the Python module (uncomment to build automatically)
# RUN mkdir -p build && cd build && \
#     cmake -DBUILD_PYTHON_MODULE=ON -DENABLE_CUDA=ON .. && \
#     make gmp_featurizer

# Set default command
CMD ["/bin/bash"] 
